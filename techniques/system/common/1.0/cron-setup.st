#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

bundle agent setup_cronjob
{
  files:

    linux::

      # Temporary cron file added by rudder-agent postinst to prevent from UUID removal.
      # When this promise will be generated, this cron will be useless then removed.
      # (see http://www.rudder-project.org/redmine/issues/3925 and http://www.rudder-project.org/redmine/issues/3930).
      "/etc/cron.d/rudder-agent-uuid"
        delete => tidy;

    community_edition.!aix::

      "/etc/cron.d/rudder-agent"
        create          => "true",
        perms           => mog("644", "root", "0"),
        edit_defaults   => empty_backup,
        template_method => "mustache",
        edit_template   => "${sys.workdir}/inputs/common/cron/rudder-agent-community-cron";
&if(NOVA)&

    nova_edition.!aix::

      "/etc/cron.d/rudder-agent-nova"
        create        => "true",
        perms         => mog("644", "root", "0"),
        edit_defaults => empty_backup,
        edit_line     => expand_template("${sys.workdir}/inputs/common/cron/rudder-agent-nova-cron");
&endif&

    aix::

      # Cleanup the crontab
      "/var/spool/cron/crontabs/root"
        edit_defaults => noempty_backup,
        edit_line => delete_lines_matching("0,5,10,15,20,25,30,35,40,45,50,55 \* \* \* \* if \[ -x /opt/rudder/bin/check-rudder-agent \]; then /opt/rudder/bin/check-rudder-agent( >/dev/null)?; fi");

      # Cleanup the pre-4.0 crontab
      "/var/spool/cron/crontabs/root"
        edit_defaults => noempty_backup,
        edit_line => delete_lines_matching("0,5,10,15,20,25,30,35,40,45,50,55 \* \* \* \* /usr/bin/test -x /opt/rudder/bin/check-rudder-agent.*");

      # Cleanup the crontab without logfile
      "/var/spool/cron/crontabs/root"
        edit_defaults => noempty_backup,
        edit_line => delete_lines_matching("0,5,10,15,20,25,30,35,40,45,50,55 \* \* \* \* /usr/bin/test -x /opt/rudder/bin/rudder \&\& /opt/rudder/bin/rudder agent check >/dev/null");

      # Cleanup crontab again
      "/var/spool/cron/crontabs/root"
        edit_defaults => noempty_backup,
        edit_line => delete_lines_matching("0,5,10,15,20,25,30,35,40,45,50,55 \* \* \* \* /usr/bin/test -x /opt/rudder/bin/rudder \&\& /opt/rudder/bin/rudder agent check >> /var/log/rudder/agent-check/check.log 2>\&1");

      # Add Rudder entry
      "/var/spool/cron/crontabs/root"
        create        => "true",
        perms         => mog("600", "root", "cron"),
        edit_line     => insert_lines("0,5,10,15,20,25,30,35,40,45,50,55 * * * * /opt/rudder/bin/rudder agent check -q >> /var/log/rudder/agent-check/check.log 2>\&1"),
        classes       => rudder_common_classes("rudder_aix_crontab_insertion"),
        comment       => "Insert an AIX-compatible user crontab to run /opt/rudder/bin/rudder agent check";

}

#######################################################
# Check if the cron daemon is running
# This only works with unix flavoured systems too

bundle agent check_cron_daemon
{
  vars:

    redhat|fedora|slackware::
      "service_name" string => "crond";
    !(redhat|fedora|slackware)::
      "service_name" string => "cron";

  classes:

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:

    pass2.restart_crond::
      "restart_cron" usebundle => disable_reporting;
      "restart_cron" usebundle => _method_reporting_context("CRON Daemon", "None");
      "restart_cron" usebundle => service_restart("${service_name}");
      "restart_cron" usebundle => enable_reporting;

    # Fake success result, since we don't actually call service_restart unless it's needed
    pass2.!aix.!restart_crond::
      "any" usebundle => _classes_success("service_restart_${service_name}");

    pass3.!aix::
      "any" usebundle => rudder_common_reports_generic("Common", "service_restart_${service_name}", "&TRACKINGKEY&", "CRON Daemon", "None", "Cron daemon status");

    aix::
      "any" usebundle => rudder_common_report("Common", "result_na", "&TRACKINGKEY&", "CRON Daemon", "None", "CRON is not a service on AIX: CRON verifications skipped");

  processes:

    !aix::
      "cron"
        process_select => cron_bin,
        restart_class => "restart_crond";

}
